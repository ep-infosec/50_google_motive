// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace motive;

// Set of thresholds to determine if the current state is stopped at-target.
table Settled1fParameters {
  // If the difference between 'state_.position' and 'target_.position' is below
  // this threshold, the Magnet is considered to be "at-target".
  max_difference:float;

  // If the absolute value of 'state_.velocity' is below this threshold,
  // the Magnet is considered to be "stopped".
  max_velocity:float;
}

table ModularParameters {
  // A modular value wraps around from min to max. For example, an angle
  // is modular, where -pi is equivalent to +pi. Setting this to true ensures
  // that arithmetic wraps around instead of clamping to min/max.
  modular:bool;

  // Minimum value for Motivator::Value(). Clamped or wrapped-around when we
  // reach this boundary.
  min:float;

  // Maximum value for Motivator::Value(). Clamped or wrapped-around when we
  // reach this boundary.
  max:float;
}

// Characterize the movement of an overshoot Motivator. Please see
// overshoot_processor.cpp for the actual algorithm.
//
// e.g. An angle will set 'modular' to true, with 'min' of -pi and 'max' of +pi.
// The 'max_delta' and 'max_velocity' for an angle will depend on the thing that
// is turning--a face angle might move more slowly than a robot arm, for
// example.
table OvershootParameters {
  // Common properties for everything based on InitWithVelocity.
  base:ModularParameters;


  // Maximum speed at which the value can change. That is, maximum value for
  // the Motivator::Velocity(). In units/tick.
  // For example, if the value is an angle, then this is the max angular
  // velocity, and the units are radians/tick.
  max_velocity:float;

  // Maximum that Motivator::Value() can be altered on a single call to
  // MotiveEngine::AdvanceFrame(), regardless of velocity or delta_time.
  max_delta:float;

  // Cutoff to determine if the Motivator's current state has settled on the
  // target. Once it has settled, Value() is set to TargetValue() and Velocity()
  // is set to zero.
  at_target:Settled1fParameters;

  // Acceleration is a multiple of abs('state_.position' - 'target_.position').
  // Bigger differences cause faster acceleration.
  acceleration_per_difference:float;

  // When accelerating away from the target, we multiply our acceleration by
  // this amount. We need counter-acceleration to be stronger so that the
  // amplitude eventually dies down; otherwise, we'd just have a pendulum.
  wrong_direction_acceleration_multiplier:float;

  // The algorithm is iterative. When the iteration step gets too big, the
  // behavior becomes erratic. This value clamps the iteration step.
  max_delta_time:short = 32767;
}

table SplineParameters {
  // Common properties for everything based on InitWithVelocity.
  base:ModularParameters;
}

table TwitchParameters {
  // When a twitch happens, Motivator::Velocity() is set to this value.
  // A twitch happens when 'twitch_settled' is true and a twich is requested. velocity:float;

  // Cutoff to determine if twitch can be applied. Twitch is only applied when
  // the state has more-or-less settled on the target. The more-or-less-ness is
  // determined by this variable.
  settled:Settled1fParameters;
}

